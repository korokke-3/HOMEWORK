# -*- coding: utf-8 -*-
"""ai_engineering_03_T4.ipynb のコピー のコピー

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1toQI68r3eMuLL2VjhFecaqHqBEFdUAjB

# 方針

1. **ベースラインモデル評価**  
   素のモデルで回答を生成し、LLM単体での性能を確認する。

2. **RAGの実装**  
   参考資料を用意し、それをLLMに与えることで、LLMの回答の質が向上したか確認する。

## 扱う質問とその意図

以下の5つの質問を扱います。\
・(物理)同じ半径の小球が斜面上を運動するとき、転がる場合とそうでない場合のどちらの方が早く斜面を下り終える？\
$\quad$ 考えて答える必要がある問題への応答の変化を見たいから。また、二択で答えられるので評価しやすい。\
・(数学)正の整数$x,y,z$を用いて $N=9z^2=x^6+y^4$と表される正の整数$N$の最小値を求めよ。最初に答えを出力し、その根拠を書いてください。\
$ \quad$上の質問と同じ。出典は2025年京都大学の入試問題。

・(東大)東京大学の進学選択について説明してください\
$\quad$ モデルは様々な内容を総括的に学ぶので、東京大学に特化した情報は持っていないかもしれない。\
・(ニュース)Nintendo Switch 2について説明してください\
$\quad$ 2025年4月に発表されたため、LLM単体では答えられないと考えられる。\
・(AI)AIエージェントについて説明してください。\
$\quad$最近の概念ではあるが、LLMでも知識は持っていると思われる。解答の向上について調べる。

## 扱うモデル

「google/gemma-2-2b-jpn-it」を使用します。純粋なベースライン評価から各手法の効果を観察します

### 環境の準備
"""

!pip install --upgrade transformers
!pip install google-colab-selenium
!pip install bitsandbytes

# 演習用のコンテンツを取得
!git clone https://github.com/korokke-3/HOMEWORK

# HuggingFace Login
from huggingface_hub import notebook_login

notebook_login()

# CUDAが利用可能ならGPUを、それ以外ならCPUをデバイスとして設定
import torch
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

import random
random.seed(0)

# モデル(Gemma2)の読み込み

from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig

model_name = "google/gemma-2-2b-jpn-it"
tokenizer = AutoTokenizer.from_pretrained(model_name)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_use_double_quant=False,
)

model = AutoModelForCausalLM.from_pretrained(
            model_name,
            device_map="auto",
            quantization_config=bnb_config,
            torch_dtype=torch.bfloat16,
        )

"""# 1. ベースラインモデル評価
**まずはベースモデルがどの程度知識を持っているか確かめる**
"""

def generate_output(query):
  messages = [
      {"role": "user", "content": query},
  ]
  input_ids = tokenizer.apply_chat_template(
      messages,
      add_generation_prompt=True,
      return_tensors="pt"
  ).to(model.device)

  terminators = [
      tokenizer.eos_token_id,
      tokenizer.convert_tokens_to_ids("<|eot_id|>")
  ]

  outputs = model.generate(
      input_ids,
      max_new_tokens=256,
      eos_token_id=terminators,
      do_sample=False,
      # temperature=0.6, # If do_sample=True
      # top_p=0.9,  # If do_sample=True
  )

  response = outputs[0][input_ids.shape[-1]:]
  return tokenizer.decode(response, skip_special_tokens=True)

question =  "同じ半径の小球が斜面上を運動するとき、転がる場合とそうでない場合のどちらの方が早く斜面を下り終える？"
response = generate_output(question)
print(response)

question =  "正の整数$x,y,z$を用いて $N=9z^2=x^6+y^4$と表される正の整数$N$の最小値を求めよ。最初に答えを出力し、その根拠を書いてください。"
response = generate_output(question)
print(response)

question =  "東京大学の進学選択について説明してください"
response = generate_output(question)
print(response)

question =  "Nintendo Switch 2について説明してください"
response = generate_output(question)
print(response)

question =  "AIエージェントについて説明してください。"
response = generate_output(question)
print(response)

"""## 結果 (ベースモデル)

「google/gemma-2-2b-jpn-it」の各質問への答えについてまとめます。\
\
・(物理)逆の回答を出力した。理由も曖昧。\
・(数学)間違った回答をした。根拠も書けていない。\
・(東大)2年から3年になるときにするものであることを把握できていない。\
・(ニュース)情報自体はあるが、今ある情報全ては当然把握しきれていない。\
・(AI)十分に正しい回答ができている。これ以上の改善が見られるかに注目したい。

---

# 2. RAGの実装

モデルの回答の事実性を向上させるためにRetrieval Augmented Generation (RAG)技術を導入します：

* **知識ソース**: 物理学、数学については自分で考えた回答。
東大、AIについてはwikipediaページを利用。(https://ja.wikipedia.org/wiki/%E6%9D%B1%E4%BA%AC%E5%A4%A7%E5%AD%A6%E3%81%AE%E9%80%B2%E5%AD%A6%E9%81%B8%E6%8A%9E、https://ja.wikipedia.org/wiki/%E7%9F%A5%E7%9A%84%E3%82%A8%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%B3%E3%83%88) \
Switch2については、紹介映像のYoutubeの文字起こしを利用した。(https://www.youtube.com/watch?v=oCc6N_EoT44&t=2s)
* **目的**: モデルに正確な知識と文脈を提供し、事実に基づいた回答を促す

**RAG実装**: 演習で活用した方法を活用
* **分割方法**: 「。」（句点）で区切られた文単位でテキストを分割し、マッチした文とその前後二文を入力する。そのとき、質問文と本当に関連性があるかをLLMに質問し、関連している場合のみ入力に追加した。Youtubeの文字起こしについては手動で句点を打ち込んだ。
* **検索手法**: シンプルな類似度ベースの検索でクエリに関連する文を抽出
"""

from sentence_transformers import SentenceTransformer

emb_model = SentenceTransformer("infly/inf-retriever-v1-1.5b", trust_remote_code=True)
# In case you want to reduce the maximum length:
emb_model.max_seq_length = 4096

with open("/content/HOMEWORK/data/homework", "r") as f:
  raw_writedown = f.read()

# ドキュメントを用意する。
documents = [text.strip() for text in raw_writedown.split("。")]
print("ドキュメントサイズ: ", len(documents))
print("ドキュメントの例: \n", documents[10])

# Retrievalを行う関数を定義
def generate_with_rag(question, documents,topk=5):
  query_embeddings = emb_model.encode([question], prompt_name="query")
  document_embeddings = emb_model.encode(documents)

  # 各ドキュメントの類似度スコア
  scores = (query_embeddings @ document_embeddings.T) * 100

  references = []
  for ref in ["。".join(documents[max(0, i-2): min(i+2, len(documents))]).strip() for i in scores.argsort()[0][::-1][:topk]]:

    query = f"与えられた[参考資料]が[質問]に直接関連しているかを、'yes''no'で答えること。[参考資料]\n{ref}\n\n[質問] \n{question}"
    response = generate_output(query)

    if "yes" in response.lower():
      references.append(ref)

  query =  f"[参考資料]\n{references}\n\n[質問] \n{question}"
  response = generate_output(query)
  print(response)

generate_with_rag("同じ半径の小球が斜面上を運動するとき、転がる場合とそうでない場合のどちらの方が早く斜面を下り終える？",documents)

generate_with_rag("正の整数$x,y,z$を用いて $N=9z^2=x^6+y^4$と表される正の整数$N$の最小値を求めよ。最初に答えを出力し、その根拠を書いてください",documents)

generate_with_rag("東京大学の進学選択について説明してください",documents)

generate_with_rag("Nintendo Switch 2について説明してください",documents)

generate_with_rag("AIエージェントについて説明してください",documents)

"""# 結果の分析


# (1)
## 質問
同じ半径の小球が斜面上を運動するとき、転がる場合とそうでない場合のどちらの方が早く斜面を下り終える？

\
##実装前

**転がる場合の方が早く斜面を下り終えます。**

理由は以下の通りです。

* **転がる場合:**  斜面を滑りながら移動するため、摩擦力によって速度が維持されます。
* **そうでない場合:**  斜面を直線的に移動するため、摩擦力による制約が少なく、速度が一定ではありません。


\
##実装後
**答え：転がらない場合の方が早く斜面を下り終えます。**

**解説:**

* **定性的な考察:**  斜面上の運動は位置エネルギーと運動エネルギーの交換現象として考えられます。転がる場合は位置エネルギーが運動エネルギーのみでなく回転エネルギーにも変換されるため、速度が大きくならない。
* **定量的な考察:**  球の質量、半径、高度などを用いて、エネルギー保存則を用いて速度を計算します。転がる場合は速度が大きくならないため、転がらない場合の方が早く斜面を下り終えます。


\
##変化点
正しい回答ができているが、参考資料をそのまま写したような回答になっている。
定量的な考察と書いているものの、数値的な考察はできていない。


\
# (2)
##質問
正の整数$x,y,z$を用いて $N=9z^2=x^6+y^4$と表される正の整数$N$の最小値を求めよ。最初に答えを出力し、その根拠を書いてください。

\
##実装前

##  Nの最小値

**最小値： 1**

**根拠:**

* **$x^6 + y^4$ の最小値を求める:**  $x^6 + y^4$ は $x$ と $y$ の値によって変化します。
* **$x$ と $y$ の組み合わせ:**  $x^6 + y^4$ の最小値は $x$ と $y$ の組み合わせによって異なります。
* **$x^6 + y^4$ の最小値を求める:**  $x^6 + y^4$ の最小値は $x$ と $y$ の組み合わせによって異なります。
* **$x^6 + y^4$ の最小値を求める:**  $x^6 + y^4$ の最小値は $x$ と $y$ の組み合わせによって異なります。


\
##実装後
**最小値：2025**

**根拠**

* **mod3の性質:**  平方数は0か1にしかならないという性質を利用します。
* **x,yの条件:**  9z²は0なので、x,yはどちらも3の倍数となります。
* **Nの最小値:**  N=9z²=x⁶+y⁴と表されるので、mod3で考えるとx⁶とy⁴は0か1にしかならないため、x,yはどちらも3の倍数となります。


\
##変化点
上の質問と同様、正しい回答はできているが、参考資料を丸写ししたようになっている。
根拠も途中で終わっている。


\
# (3)
## 質問
東京大学の進学選択について説明してください

\
## 実装前
## 東京大学進学選択について

東京大学進学は、多くの学生にとって夢のような目標です。しかし、選択は非常に多岐に渡り、自分に合った道を選ぶことが重要です。

**まず、東京大学進学の選択肢は大きく分けて３つです:**

1. **学部選択:**  東京大学は、様々な学部・学科を設けています。
    * **理系:** 理学部、工学部、農学部、獣医学部など
    * **文系:**  文学部、経済学部、法学部、教育学部など
    * **人間科学系:**  社会学部、文化学部、人間科学部など
    * **医学系:**  医学部、歯学部、薬学部など
    * **芸術系:**  美術学部、音楽学部、映画学部など
2. **研究科選択:**  学部選択に加えて、研究科を選択することも可能です。
    * **研究科:**  研究活動に重点を置く、専門性の高い選択
3. **大学院選択:**  学部・研究科を卒業後、さらに学びたいという学生は大学院に進学します。
    * **大学院:**  専門分野を深く学ぶ、研究・


\
##実装後
東京大学の進学選択は、**2年生の前半終了時に学部・学科への進学内定**を行います。

**具体的には以下の点が特徴です:**

* **後期課程の進学は2年生の前半終了時に内定:**  入学後、2年生の後半まで進学するかどうかを決める制度です。
* **学科による定員:**  各学科には、入学可能な定員があります。
* **希望者の多い学科:**  希望者が多く、内定が難しい学科は、1年半の履修成績を考慮した選考が行われます。
* **進学選択:**  この選考のことを「進学選択」と呼びます。


**進学選択の仕組み**

1. **希望する学科の選考:**  2年生の前半終了時に、希望する学科を選択します。
2. **内定:**  選択した学科の定員に満たない場合は、内定が難しい場合があります。
3. **選考:**  希望者が多い学科では、1年半の履修成績を考慮した選考が行われます。


\
##変化点
明らかに正しくなった。wikipediaの情報を用いた詳しい回答ができている。


\
# (4)
## 質問
Nintendo Switch 2について説明してください


\
##実装前
## Nintendo Switch 2（仮称：Nintendo Switch 2）について

Nintendo Switch 2は、Nintendoが開発・販売するゲーム機です。正式な名称は発表されていませんが、2023年以降に発売されることが予想されています。

**主な特徴:**

* **高性能化:**  Switch 2は、Switchよりも高性能なCPU、GPU、メモリを搭載する予定です。ゲームの画質やフレームレートが向上し、より高画質で快適なゲーム体験が可能になります。
* **新しいハードウェア:**  従来のハードウェアから進化した新しいハードウェアを採用し、より高性能なゲームプレイを実現します。
* **VR対応:**  VR対応機能が追加される可能性があります。
* **より進化した操作性:**  従来の操作方法に加え、より革新的な操作方法が導入される可能性があります。
* **新しいゲーム体験:**  従来のゲーム体験に加え、新しいゲーム体験を提供する可能性があります。

**噂や情報:**

* **発売時期:**  2024年後半が有力な予想です。
* **価格:**  Switchの価格帯から少し高めになる可能性があります。
* **ゲームソフト:**


\
##実装後
## Nintendo Switch 2 について

Nintendo Switch 2は、Nintendo Switchの進化版です。従来のゲーム機に加え、**より大きな画面、高速なアクセス、新しいドック機能**など、様々な進化がされています。

**主な特徴は以下の通りです:**

* **画面サイズが大きくなった:**  従来の画面よりも大きく、より臨場感のあるゲーム体験を実現。
* **ドック機能が進化:**  最大4Kの高精細な映像出力が可能で、HDR出力にも対応。冷却ファンを内蔵し、発熱を抑え、本体性能を最大限に引き出します。
* **USB Type-C端子追加:** 本体上部にも追加され、カメラ接続やテーブルモードでの充電が便利になりました。
* **本体保存メモリの容量が8倍に増量:**  従来のソフトをより多くダウンロードできます。
* **アクセス速度が向上:**  従来のUSB Type-C端子に加え、本体上部にも追加されたUSB Type-C端子により、より高速なデータ処理が可能になりました。


**プレイモードの進化:**

* **TVモード:** テレビにつないで大画面で楽しむ
* **テーブルモード:** 本体スタンドを立て


\
##変化点
一個上の質問と同様、正しくなっている。やはり、wikipediaの情報をRAGの参考資料として導入することは有効であると考えられる。


\
#(5)
## 質問
AIエージェントについて説明してください


\
##実装前
## AIエージェントについて

AIエージェントとは、**人工知能（AI）によって構築された、人間と同様の意思決定や行動を行うシステム**です。

**主な特徴:**

* **自動化:**  複雑なタスクを自動的に実行します。
* **意思決定:**  状況に応じて適切な行動を選択できます。
* **学習:**  経験から学習し、精度を向上させます。
* **人間と連携:**  人間と協働し、より効率的な作業を実現します。
* **多様なタスク:**  顧客対応、医療診断、金融分析など、様々な分野で活用されています。

**具体的な例:**

* **チャットボット:**  顧客の問い合わせに自動的に回答するシステム
* **自動運転車:**  道路状況を認識し、安全な運転を行うシステム
* **医療診断システム:**  患者データから病状を診断するシステム
* **金融取引システム:**  投資判断や取引の自動化を行うシステム


**メリット:**

* **効率性:**  人間よりも迅速かつ正確な作業が可能
* **コスト削減:**  人間による作業を自動化することで、コスト削減が可能
* **24



\
##実装後
AIエージェントとは、**一種の人工知能的機能を有するソフトウェアエージェント**です。

**具体的には:**

* **ユーザーを補助:**  複雑なタスクをユーザーに代わって行います。
* **繰り返し行うべきコンピュータ関連のタスク:**  データマイニングや操作補助など、ユーザーが頻繁に行うべきタスクを自動化します。
* **学習・適応:**  状況の変化を学習し、適切な行動を選択する能力を持っています。

**特徴:**

* **自律知能:**  独立して行動し、状況の変化を学習して適応します。
* **学習:**  経験を通して、より正確で効率的な行動を学習します。
* **適応:**  状況の変化に応じて、対応策を柔軟に変更します。


\
##変化点
おおまかに似通った回答となっている。wikipediaの情報に近付いているようにも見える。

#改善案

物理や数学については、覚えるだけでは解けない問題が多いので、今回のような例以外ではRAGの導入が難しいかもしれない。
公式などを学ばせて、それを使わせることも今後試してみたい。
他の新しい情報については、既にインターネット上で発信されている内容であればwikipediaの情報を参考資料にするのが有効に思われる。
既にmodelが知っていた情報については、大幅な向上は見られなかった。
"""